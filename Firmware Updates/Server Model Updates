/*
 * Local Python Server Model - Dynamic Sensor Update
 * Uses WiFiNINA to connect to Wi-Fi and HTTP client to poll a Flask server.
 * MKR WiFi 1010 + MKR ENV Shield. Initially reads temperature.
 * Server should return "temperature", "humidity", or "none" (as plain text).
 */

#include <WiFiNINA.h>
#include <Arduino_MKRENV.h>  // Library for the MKR ENV Shield (temperature & humidity sensors)

// Wi-Fi network credentials (replace with your SSID and password)
const char* WIFI_SSID     = "YourWiFiSSID";
const char* WIFI_PASSWORD = "YourWiFiPassword";

// Server details (replace with your Flask server's address and port)
const char* SERVER_HOST = "192.168.1.100";  // e.g., local server IP or hostname
const int   SERVER_PORT = 5000;             // e.g., Flask default port
const String SERVER_PATH = "/command";      // endpoint path that returns the sensor command

// Timing intervals (in milliseconds)
const unsigned long COMMAND_CHECK_INTERVAL = 10000;  // check server every 10 seconds
const unsigned long SENSOR_READ_INTERVAL   = 5000;   // read sensor every 5 seconds

// State variables
String activeSensor = "temperature";  // default sensor mode
unsigned long lastCommandCheck = 0;
unsigned long lastSensorRead   = 0;

// Functions to read sensors using the MKR ENV Shield
float readTemperature() {
  // Read temperature in Celsius from the ENV shield
  return ENV.readTemperature();
}

float readHumidity() {
  // Read humidity (relative percentage) from the ENV shield
  return ENV.readHumidity();
}

void connectWiFi() {
  // Attempt to connect to Wi-Fi network
  Serial.print("Connecting to WiFi SSID: ");
  Serial.println(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  // Wait until connected (or timeout after a few attempts)
  int maxAttempts = 10;
  while (WiFi.status() != WL_CONNECTED && maxAttempts-- > 0) {
    delay(1000);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected. IP address: " + WiFi.localIP().toString());
  } else {
    Serial.println("\nWiFi connection failed!");
  }
}

String fetchServerCommand() {
  // Connect to the Flask server and get the command
  WiFiClient client;
  String command = "";
  if (client.connect(SERVER_HOST, SERVER_PORT)) {
    // Make HTTP GET request
    client.print(String("GET ") + SERVER_PATH + " HTTP/1.1\r\n");
    client.print(String("Host: ") + SERVER_HOST + "\r\n");
    client.print("Connection: close\r\n\r\n");
    // Read response
    bool headersEnded = false;
    String responseLine;
    while (client.connected() || client.available()) {
      if (client.available()) {
        char c = client.read();
        if (!headersEnded) {
          // Look for end of headers (blank line)
          responseLine += c;
          if (responseLine.endsWith("\r\n\r\n")) {
            headersEnded = true;
          }
        } else {
          // Headers are done, read the body (command)
          command += c;
        }
      }
    }
    client.stop();
    // Trim any whitespace/newlines from the command
    command.trim();
  } else {
    Serial.println("Error: Could not connect to server");
  }
  return command;
}

void setup() {
  Serial.begin(115200);
  while (!Serial) ; // wait for serial port to connect (needed for native USB)
  
  // Initialize the ENV Shield
  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV Shield!");
    while (1); // halt if sensor shield is not detected
  }
  
  // Connect to Wi-Fi network
  connectWiFi();
  
  Serial.println("Starting Local Server Model. Default sensor: temperature.");
}

void loop() {
  unsigned long now = millis();
  
  // Periodically check with the server for an update command
  if (now - lastCommandCheck >= COMMAND_CHECK_INTERVAL) {
    lastCommandCheck = now;
    String newCommand = fetchServerCommand();
    if (newCommand.length() > 0) {
      Serial.println("Server response: " + newCommand);
      // Only update activeSensor if the command is recognized
      if (newCommand == "temperature" || newCommand == "humidity" || newCommand == "none") {
        if (newCommand != activeSensor) {
          activeSensor = newCommand;
          Serial.println("Updated active sensor mode to: " + activeSensor);
        }
      } else {
        Serial.println("Warning: Unrecognized command, ignoring.");
      }
    }
  }
  
  // Periodically read from the active sensor (if not disabled)
  if (now - lastSensorRead >= SENSOR_READ_INTERVAL) {
    lastSensorRead = now;
    if (activeSensor == "temperature") {
      float t = readTemperature();
      Serial.print("Temperature: ");
      Serial.print(t);
      Serial.println(" Â°C");
      // (Here you could send the data to a server or cloud if needed)
    } else if (activeSensor == "humidity") {
      float h = readHumidity();
      Serial.print("Humidity: ");
      Serial.print(h);
      Serial.println(" %");
    } else if (activeSensor == "none") {
      Serial.println("Sensor readings disabled (activeSensor == 'none').");
    }
    // If activeSensor has some other unexpected value, do nothing.
  }
}
