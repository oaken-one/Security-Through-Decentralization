/*
 * Arduino IoT Cloud Model - Dynamic Sensor Update
 * Uses ArduinoIoTCloud to sync a cloud variable 'activeSensor'.
 * MKR WiFi 1010 + MKR ENV Shield. Initially reads temperature.
 * Changing the 'activeSensor' variable on the IoT Cloud dashboard triggers the device to switch sensors.
 */

#include <WiFiNINA.h>
#include <Arduino_MKRENV.h>
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

// Wi-Fi network credentials and IoT Cloud info
const char* WIFI_SSID     = "YourWiFiSSID";
const char* WIFI_PASSWORD = "YourWiFiPassword";
const char* THING_ID      = "YOUR_THING_ID";      // Arduino IoT Cloud Thing ID
const char* DEVICE_LOGIN  = "YOUR_DEVICE_ID";     // Device ID (from IoT Cloud setup)
const char* DEVICE_KEY    = "YOUR_DEVICE_SECRET"; // Device key from Arduino IoT Cloud

CloudString activeSensor;         // Cloud variable (READ/WRITE) for active sensor selection
// (Possible values: "temperature", "humidity", "none")

const unsigned long SENSOR_READ_INTERVAL = 5000;  // read sensor every 5 seconds
unsigned long lastSensorRead = 0;

// Forward declaration of callback
void onActiveSensorChange();

// Functions to read sensors
float readTemperature() {
  return ENV.readTemperature();
}
float readHumidity() {
  return ENV.readHumidity();
}

void setup() {
  Serial.begin(115200);
  while (!Serial);  // wait for Serial monitor
  
  // Initialize ENV Shield sensors
  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV Shield!");
    while (1);
  }
  
  // Connect to Wi-Fi and Arduino IoT Cloud
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi.");
  
  // Configure Arduino IoT Cloud connection
  ArduinoCloud.setThingId(THING_ID);
  ArduinoCloud.setDeviceId(DEVICE_LOGIN);
  ArduinoCloud.setDeviceSecret(DEVICE_KEY);
  // Set up the WiFi connection to Arduino IoT Cloud
  WiFiConnectionHandler ArduinoIoTPreferredConnection(WIFI_SSID, WIFI_PASSWORD);
  
  // Add cloud variable (activeSensor) with a callback on change
  ArduinoCloud.addProperty(activeSensor, READWRITE, ON_CHANGE, onActiveSensorChange);
  
  // Begin cloud connection
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  // Set initial value for cloud variable and sync with cloud
  activeSensor = "temperature";  // default mode
  ArduinoCloud.update();  // push initial value to cloud
  
  Serial.println("Connected to Arduino IoT Cloud. Default sensor: temperature.");
}

void loop() {
  // Continuously sync with the IoT Cloud to get any updates
  ArduinoCloud.update();
  
  // Periodically read from the active sensor (based on the current cloud value)
  unsigned long now = millis();
  if (now - lastSensorRead >= SENSOR_READ_INTERVAL) {
    lastSensorRead = now;
    if (activeSensor == "temperature") {
      float t = readTemperature();
      Serial.print("Temperature: ");
      Serial.print(t);
      Serial.println(" Â°C");
    } else if (activeSensor == "humidity") {
      float h = readHumidity();
      Serial.print("Humidity: ");
      Serial.print(h);
      Serial.println(" %");
    } else if (activeSensor == "none") {
      Serial.println("Sensor readings are disabled (activeSensor == 'none').");
    }
    // (If other values somehow present, ignore them)
  }
}

// Callback function that is called whenever the cloud variable 'activeSensor' changes
void onActiveSensorChange() {
  Serial.print("Cloud update received. New active sensor: ");
  Serial.println(activeSensor);
  // (The activeSensor variable is already updated to the new value at this point.)
}
