/*
 * Blockchain-Integrated Model - Dynamic Sensor Update
 * Uses an Ethereum smart contract's state to control which sensor is active.
 * MKR WiFi 1010 + MKR ENV Shield. Default mode = 0 (temperature).
 * Requires a web3 library and an RPC endpoint (Infura, etc.) to query the blockchain.
 */

#include <WiFiNINA.h>
#include <Arduino_MKRENV.h>
// Assume we have a Web3 library for Arduino (e.g., https://github.com/kopanitsa/web3-arduino)
#include <Web3.h>
#include <Contract.h>

// Wi-Fi network credentials
const char* WIFI_SSID     = "YourWiFiSSID";
const char* WIFI_PASSWORD = "YourWiFiPassword";

// Ethereum network RPC endpoint (Infura/Alchemy URL or IP of local node)
const char* ETH_RPC_HOST  = "YOUR_ETH_NODE_URL";  // e.g., "rinkeby.infura.io"
const int   ETH_RPC_PORT  = 80;                  // 443 for HTTPS, 80 for HTTP (use WiFiSSLClient for HTTPS)
const bool  USE_SSL       = false;               // set true if using HTTPS (443)

// Smart contract details
const char* CONTRACT_ADDRESS = "0x123456...ABCDEF";  // Ethereum address of the FirmwareUpdates contract
// ABI or function signature for the getter (if using Contract library)
const char* GET_MODE_SIGNATURE = "getMode()";

// Polling interval for blockchain (e.g., 60 seconds)
const unsigned long BLOCKCHAIN_CHECK_INTERVAL = 60000;
const unsigned long SENSOR_READ_INTERVAL      = 10000;
unsigned long lastBlockchainCheck = 0;
unsigned long lastSensorRead      = 0;

// State variable for mode: 0 = temp, 1 = humidity, 2 = none (disabled)
int currentMode = 0;  // default to 0 (temperature)

// Sensor reading functions
float readTemperature() {
  return ENV.readTemperature();
}
float readHumidity() {
  return ENV.readHumidity();
}

Web3 web3;            // Web3 instance for blockchain communication
Contract contract(web3, CONTRACT_ADDRESS);  // Contract helper

void connectWiFi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected. IP address: " + WiFi.localIP().toString());
}

int fetchContractMode() {
  // Calls the smart contract to get the current mode.
  // (Using a hypothetical web3 library call. In practice, this might use web3.eth.call via HTTP.)
  
  // Prepare the data for the contract call
  String func = GET_MODE_SIGNATURE;
  String paramData = contract.SetupContractData(func.c_str());
  
  // Use appropriate client depending on HTTP or HTTPS
  String result;
  if (USE_SSL) {
    WiFiSSLClient ethClient;
    if (!ethClient.connect(ETH_RPC_HOST, 443)) {
      Serial.println("Error: HTTPS connect failed");
      return currentMode;  // return old mode if failed to get new one
    }
    // ... (send JSON-RPC request using ethClient.println())
    // For brevity, using the Contract library's Call method instead:
    result = contract.Call(&paramData);
    ethClient.stop();
  } else {
    WiFiClient ethClient;
    if (!ethClient.connect(ETH_RPC_HOST, ETH_RPC_PORT)) {
      Serial.println("Error: RPC connection failed");
      return currentMode;
    }
    // Using contract.Call for simplicity (would internally use ethClient)
    result = contract.Call(&paramData);
    ethClient.stop();
  }
  
  // `result` is a hex string of the return value (e.g., "0x00000000000000000000000000000001" for mode = 1).
  // We need to parse it to an integer.
  int newMode = currentMode;
  if (result.length() > 2 && result.startsWith("0x")) {
    // Parse hex string to integer
    result.remove(0, 2); // remove "0x"
    // Take the last two hex digits (assuming mode is small)
    String lastByte = result.substring(result.length() - 2);
    char buf[3];
    lastByte.toCharArray(buf, 3);
    long modeValue = strtol(buf, NULL, 16);
    newMode = (int)modeValue;
  }
  return newMode;
}

void setup() {
  Serial.begin(115200);
  while (!Serial);
  
  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV Shield!");
    while (1);
  }
  
  connectWiFi();
  
  // Initialize web3 connection (set RPC node host)
  if (USE_SSL) {
    web3.setRPCURL(String("https://") + ETH_RPC_HOST);  // e.g., Infura HTTPS endpoint
  } else {
    web3.setRPCURL(String("http://") + ETH_RPC_HOST);   // HTTP endpoint
  }
  
  // Set default mode
  currentMode = 0;
  Serial.println("Blockchain model initialized. Default mode: 0 (Temperature)");
}

void loop() {
  unsigned long now = millis();
  
  // Periodically poll the blockchain for the latest mode value
  if (now - lastBlockchainCheck >= BLOCKCHAIN_CHECK_INTERVAL) {
    lastBlockchainCheck = now;
    int newMode = fetchContractMode();
    if (newMode != currentMode) {
      Serial.print("Blockchain update detected. New mode: ");
      Serial.println(newMode);
      currentMode = newMode;
      // Interpret new mode
      if (currentMode == 0) {
        Serial.println("Active sensor set to TEMPERATURE.");
      } else if (currentMode == 1) {
        Serial.println("Active sensor set to HUMIDITY.");
      } else if (currentMode == 2) {
        Serial.println("All sensor readings DISABLED.");
      } else {
        Serial.println("Unknown mode value, defaulting to no reading.");
      }
    }
  }
  
  // Periodically read from the active sensor (if not disabled)
  if (now - lastSensorRead >= SENSOR_READ_INTERVAL) {
    lastSensorRead = now;
    if (currentMode == 0) {
      float t = readTemperature();
      Serial.print("Temperature: ");
      Serial.print(t);
      Serial.println(" Â°C");
    } else if (currentMode == 1) {
      float h = readHumidity();
      Serial.print("Humidity: ");
      Serial.print(h);
      Serial.println(" %");
    } else if (currentMode == 2) {
      Serial.println("Sensor readings are currently disabled (mode 2).");
    }
    // (If mode is some other unexpected value, do nothing)
  }
}
